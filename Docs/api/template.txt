// phpFramework template API Description
==============================================

this api is available to you once you have registry object passed as a parameter in your controller.

template is a class that allows you to manage your html files adding dynamic text generated by php and makign dynamic html files 
accoring to the request by the client.

It has no public members it has public member function.

First we need to understand how this template management works before getting to actual apis.

These apis let you join multiple html files like you may have a file that contains header and one file that contain footer and one 
file containing body of the page. so you can have these filles as header.html, body.html, footer.html then you can use a function
to get together these file in the same order you want. you can even have some tags in the file which will be replace by php 
accoriding to the data that you pass in temlplating apis. for example : 

	header.html :
		<html>
			<header> Hello {name} </header>

	body.html :
			<body>You are awesome {name}. your email is {email}, and username is {username}</body>

	footer.html : 
			<footer>this is footer</footer>
		</html>

	and after combining them using templating engine client will get this file as output :

		<html>
			<header> Hello {name} </header>
			<body>You are awesome {name}. your email is {email}, and username is {username}</body>
			<footer>this is footer</footer>
		</html>

As you can see there are some tags namely : name, username & email. so all the thing present inside brackets "{}" are tags.
And you can replace these tags like checking if the user is logged in then what is it's name, username & email and then replace them 
usign the api.

Another example : 
	
	<html>
		<header> Hello {name} </header>
		<body>
			You are awesome {name}. your email is {email}, and username is {username}
			<p>this is your profile</p>
			{file}
		</body>
		<footer>this is footer</footer>
	</html>

Along with the above tags i have added a ""file"" tag, these tags can be named anything you like you may have written abc instead of 
"file" there & it would perfectly fine.
Now you mai have a file name profile.html which contain following content : 

	<p> Your age : {age} </p>
	<p> Your hieght : {hieght} </p>
	<p> Your weight : {weight} </p>

And with this templating apis you can actualy add this file contents into the tag named file above so when the user get the content 
it might be like this 

	if we assume value of tags are 

		name : garvit, email : garvitdelhi@gmail.com, username : garvitdelhi, age : 20, height : 5'8", weight : 60

	<html>
		<header> Hello garvit </header>
		<body>
			You are awesome garvit. your email is garvitdelhi@gmail.com, and username is garvitdelhi
			<p>this is your profile</p>
			<p> Your age : 20 </p>
			<p> Your hieght : 5'8" </p>
			<p> Your weight : 60 </p>
		</body>
		<footer>this is footer</footer>
	</html>

So this is the power of template manegement. you can have as many tags you want, you may make file from combination of any number of 
files or can replace tags with either some text or some files text as well.

Actualy what templating engine does is it creates a virtual file with the combination of files you provided to templating engine
and all the tag replacing and other functins are performed on this virtual file and this virtual file is sent to the client after 
it is being totaly processed.

now template management has another power of having many virtual files also by default construct a main file which it sends it to 
client. But even you can have your own virtual files as well on which you can perform all the above tasks and you can even merge two 
virtual files as i merged profile.html into the above formed main virtual file.

Take some time to get used to it and here goes the api to do all these things : 

It has no public members it has public member function.


Functions : 

	1. buildFromTemplates : Include all the files passed as the parameter in the same order. It creates a virtual new virtual file 
							with the html files passed to it.

		/**
		 * Include all the files passed as the parameter.
		 * @param - array of file names that are to be included.
		 * @param - optional : name of the virtual file, if you don't pass any name it by default replace the current main virtual
		 * 			file's content with the files content passed as parameter.
		 * sets the content it the page contents.
		 * @return void
		 */

		example :

			header.html :
				<html>
					<header> Hello {name} </header>

			body.html :
				<body>You are awesome {name}. your email is {email}, and username is {username}</body>

			footer.html : 
					<footer>this is footer</footer>
				</html>

			to combine them and create main virtual file which is sent to client :

				$registry->getObject('template')->buildFromTemplates(['header.html', 'body.html', 'footer.html']);

			this will create a main virtual with contents as :
				<html>
					<header> Hello {name} </header>
					<body>You are awesome {name}. your email is {email}, and username is {username}</body>
					<footer>this is footer</footer>
				</html>

			if you want to create another vitual file with same content for some other reason and let the name of file be
			"ajaxData"
				
				$registry->getObject('template')->buildFromTemplates(['header.html', 'body.html', 'footer.html'], "ajaxData");

			this will create a virtual file named "ajaxData" with the contents of file provided in array.

	2. addTemplateBit : this function is used to replace a tag not with a string but with another file

		/**
		 * saves the bit you want to add
		 * @param - String $tag the tag where we insert the template e.g. {hello}
		 * @param - String $bit the template bit (path to file, or just the filename)
		 * @param - array $replacement the replacements that you want to make in that template ['username'=>'garvit']
		 * @return - void
		 */

		example :

			consider the above example which has a tag named "file" with contents :

				<html>
					<header> Hello {name} </header>
					<body>
						You are awesome {name}. your email is {email}, and username is {username}
						<p>this is your profile</p>
						{file}
					</body>
					<footer>this is footer</footer>
				</html>

			now consider a file named profile.html with contents :

				<p> Your age : {age} </p>
				<p> Your hieght : {hieght} </p>
				<p> Your weight : {weight} </p>

			now we want to replace tag "file" with profile.html content in our main virtual file then we do 

				$registry->getObject('template')->addTemplateBit('file', 'profile.html');

			now we want to replace tag "file" with profile.html content in our new virtual file named "ajaxData" then we do 

				$registry->getObject('template')->addTemplateBit('file', 'profile.html', 'ajaxData');

			the both obove line of code will create respective virtual files with contents :

				<html>
					<header> Hello {name} </header>
					<body>
						You are awesome {name}. your email is {email}, and username is {username}
						<p>this is your profile</p>
						<p> Your age : {age} </p>
						<p> Your hieght : {hieght} </p>
						<p> Your weight : {weight} </p>
					</body>
					<footer>this is footer</footer>
				</html>

	3. removeBlock : this simply deletes a block of data from virtual file and replaces it with the content you send.

		now the question is what is block here is how we define a block :

			<!-- START blockName -->
				<form action="{siteurl}login/signin" method="post">
					<input type="text" name="username" />
					<input type="password" name="password" />
				</form>

			<!-- END blockName -->

			the code in the comments <!-- START blockName -->//code<!-- END blockName --> is a block 
			blockName is the tag name for this block

			removeBlock removes this block of code from virtual file.

			/**
     		 * deletes a block of data from virtual file
     		 * @param String $blockName the tag defining the block
     		 * @param int $block the new block data that will replace the block
     		 * @return void
     		 */

     		example :
     			
     			$registry->getObject('template')->removeBlock('blockName', '');

     			this will remove the block "blockName" from the main virtual file.

     			$registry->getObject('template')->removeBlock('blockName', 'new Code');

     			this will replace the block "blockName" with "new Code" in the main virtual file

     			$registry->getObject('template')->removeBlock('blockName', '', 'ajaxData');

     			this will remove the block "blockName" from the ajaxData virtual file.

     			$registry->getObject('template')->removeBlock('blockName', 'new Code'. "ajaxData");

     			this will replace the block "blockName" with "new Code" in the ajaxData virtual file

    4. getPage : Get the page object in which you can add and remove tags

    	/**
     	 * Get the page object
     	 * @return Object 
     	 */

     	example :

     		$pageObject = $registry->getObject('template')->getPage();

     		the use of pageObject is to add different tags and replacing tags inside page

     		Now i will discuss all the functions available to you with pageObject

     		Functions :

     			--> setTitle : this sets the page title.

     					/**
		 				 * Set the page title
     	 				 * @param String $title the page title
     	 				 * @return void
		 				 */

     					example :

     						$registry->getObject('template')->getPage()->setTitle('Page Title');

     						you cannot have title to anyother file except the main virtual file

     			--> addTag : this function is user to add content of the tags that exist in virtual file

     					/**
     		 			 * Add a template tag, and its replacement value/data to the page
     		 			 * @param String $key the key to store within the tags array
      		 			 * @param String $data the replacement data (may also be an array)
     		 			 * @return void
     		 			 */

     		 			example of value as a string:

     		 				you can have tags value as a string or an array.

     		 				$registry->getObject('template')->getPage()->addTag('name', 'Garvit');

     		 				the above code translate the lower vitual file contents

     		 					<html>
									<header> Hello {name} </header>
								</html>

							to 

								<html>
									<header> Hello Garvit </header>
								</html>

							$registry->getObject('template')->getPage()->addTag('name', 'Garvit', 'ajaxData');

							the above line of code adds tags to the ajaxData virtual file instead of main virtual file.

						example of value as a array :

							$registry->getObject('template')->getPage()->addTag('name', $array);
							$registry->getObject('template')->getPage()->addTag('name', $array, "ajaxData");

							the above added tags to main file and ajaxData file respectively.

							now let us come to array, whenever you are passing array you are actualy refering to a block instead
							of a tag in your virtual files

							$array = ['option', $data];

							the array always has to be of the above format.

							where the option can be :

								SQL : if you choose this option the data has to be a cacheId and for each row that is being selected
										in the sql query the block is repeated with the data inside the rows

										example :

											$query = "SELECT name, email FROM users";
											$cacheId = $registry->getObject('db')->cacheQuery($query);
											$registry->getObject('template')->getPage()->addTag('usersAvail', ['SQL', $cacheId], "ajaxData");

											now let our html code in the block is like

												<!-- START usersAvail >
													<p>name : {name}</p>
													<p>email : {email}</p>
												<!-- END usersAvail >

											so as you can see the tag name inside the block corresponds to the column name in the 
											sql rows.

											and let us assume two rows were selected with names as Garvit, Arjun and email as 
											garvitdelhi@gmail.com and arjun123@gmail.com

											so the block will now look like 

											<!-- START usersAvail >
												<p>name : Garvit</p>
												<p>email : garvitdelhi@gmail.com</p>
												<p>name : Arjun</p>
												<p>email : arjun123@gmail.com</p>
											<!-- END usersAvail >

								DATA : if you choose this option the data has to be again an array of arrays with tag as it's key 
										and value as the tag's value

										example :

											$data = array(
												[0]=>array(
														['name']=>'garvit',
														['email']=>'garvitdelhi@gmail.com'
													),
												[1]=>array(
														['name']=>'arjun',
														['email']=>'arjun123@gmail.com'
													),
												[2]=>array(
														['name']=>'aman',
														['email']=>'aman4ll@gmail.com'
													),
											);
											$registry->getObject('template')->getPage()->addTag('usersAvail', ['DATA', $data], "ajaxData");

											ow let our html code in the block is like

												<!-- START usersAvail >
													<p>name : {name}</p>
													<p>email : {email}</p>
												<!-- END usersAvail >
											so the block will now look like 

											<!-- START usersAvail >
												<p>name : Garvit</p>
												<p>email : garvitdelhi@gmail.com</p>
												<p>name : Arjun</p>
												<p>email : arjun123@gmail.com</p>
												<p>name : aman</p>
												<p>email : aman4ll@gmail.com</p>
											<!-- END usersAvail >

								DATA_CACHE : if you choose this option you will pass the cacheId that is returned to you when you 
												saved an array in the cache using the cacheData method of mysqldb api.
									example :
										$registry->getObject('template')->getPage()->addTag('usersAvail', ['SQL', $cacheId], "ajaxData");

						An important note that it you replaced the same tag with different contents then only the last call will be taken into consideration

							example :

								$registry->getObject('template')->getPage()->addTag('name', 'garvit');
								$registry->getObject('template')->getPage()->addTag('name', 'arjun');
								$registry->getObject('template')->getPage()->addTag('name', 'aman');

								only aman will replace the tag name not with garvit or arjun.

				--> removeHTMLTag : this will remove all the occurences of this html tag 

						/**
     	 			  	 * remove all the occurences of this html tag
     	 			 	 * @param : $HTMLTag the tag name you want to remove
     	 			 	 * @return void 
    	 			 	 */

    	 				example :

    	 					$registry->getObject('template')->getPage()->removeHTMLTag('strike');

    	 					so let the code be like this 

	    	 					<p> hey how are you <strike>smart guy</strike></p>
    	 						<p> hey how are you <strike>cool guy</strike></p>

    	 					this will now change to

	    	 					<p> hey how are you smart guy</p>
    	 						<p> hey how are you cool guy</p>

    	 		--> removeTag : this will remove the tags value if you have added using addTag.

    	 				/**
     	 			 	 * remove the tags value if you have added using addTag
     	 			 	 * @param String $tag the tag to remove
     	 			 	 * @return void
     	 			 	 */

     	 				example :

	     	 				$registry->getObject('template')->getPage()->addTag('name', 'garvit');
     	 					$registry->getObject('template')->getPage()->removeTag('name');

     	 					now the above code will not replace the tag with garvit while the tag will still be there

     	 		--> addPPTag : this is asme as tag but this is somewhat special in a way that this tags are replaced in file
     	 						oncle all simple tags are replced.

     	 				/**
     	 				 * Add post parse tags: as per adding tags
     	 				 * @param String $key the key to store within the array
	     				 * @param String $data the replacement data
     	 				 * @return void
     	 				 */

     	 				example :

     	 					let the code be like :

     	 						<p>this is a diifent tag {name{ID}}</p>

     	 					so if you see above code you first need to replave the ID tag and then the name{ID} and while the page is
     	 					getting compiled it replaces all the tag at once while compiling period and not when you add a tag.

     	 					so becouse of this way of compiling the page it is important that we have some tags which are replaced
     	 					after the normal tags are being replaced.

     	 					so for the above i can do like this

     	 						$userid = 49;
     	 						$registry->getObject('template')->getPage()->addTag('ID', $userid);
     	 						$registry->getObject('template')->getPage()->addPPTag('garvit'.$userid, 'hey');

    5. parseOutput : It compiles the virtual page so that it is ready to be send to the client.

    	/**
     	 * Parse the page object into some output
     	 * @return void
     	 */
     	example :

     		this parse the main virtual file.

			$registry->getObject('template')->parseOutput();

			this parse the ajaxData virtual file.
     		
			$registry->getObject('template')->parseOutput("ajaxData");

	6. printContent : it sends the virtual page contents to you so that you can print this to client or use this content to replace
						any tag in other virtual file

		/**
     	 * Parse the page object into some output
     	 * @return void
     	 */


		example :

			$content = $registry->getObject('template')->printContent();
			print $content

			this will print the content although i don't suggest you print the code like this as framework is already sending data 
			to the client. while you can first compile the content with tags and then print the content to some other virtual file

			like this :

				$content = $registry->getObject('template')->printContent("ajaxData");
				$registry->getObject('template')->getPage()->addTag('file', $content);

	7. createEmptyFile : it creates a new virtual file with no contents at all.

		/**
     	 * reates a new virtual file
     	 * @return void
     	 */

		example :

			it creates a new virtual file named "ajaxData" with no contents at all.

			$registry->getObject('template')->createEmptyFile("ajaxData");

			you can also create main virtual file but it just deletes all the contents in main virtual file so it is not recomended
			to this.

	8. appendContent : It appends the content to the virtual file

		/**
     	 * reates a new virtual file
     	 * @param : $content to be apended
     	 * @return void
     	 */

     	exapmle :

     		$content = $registry->getObject('template')->printContent("ajaxData");
			$registry->getObject('template')->appendContent($content);

			the above code will append content to main virtual file


Now some of the things that template manegment does for you :

	1. It autometical adds siteurl tag where ever present so it is recommended to use siteurl tag always in href and src tags like :

			<img src="{siteurl}controllerName/otherthings" />

		siteurl is populated as given in database, so make sure you add a forward slash while you name your site in database.

		so it will look like 

			<img src="http://yoursite.com/controllerName/otherthings" />